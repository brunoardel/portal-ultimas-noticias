{"version":3,"sources":["Componentes/Topo/Topo.jsx","Componentes/Menu/Menu.jsx","Componentes/Noticias/Noticias.jsx","Principal.jsx","App.js","serviceWorker.js","index.js"],"names":["Topo","props","className","src","logo","height","alt","href","titulo","Menu","categorias","map","categoria","i","categoriaAtiva","url","to","key","nome","UltimasNoticias","chaveAcesso","state","noticias","style","corNomeOrigemNoticia","navigator","onLine","axios","get","this","then","response","setState","data","articles","localStorage","setItem","JSON","stringify","catch","error","console","log","noticiasEmCache","getItem","parse","prevProps","definirNoticias","length","noticia","color","source","name","target","title","class","role","Component","Principal","match","params","App","basename","process","path","component","exact","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3c17fb8e.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nexport default function Topo(props) {\r\n  return (\r\n    <header className=\"blog-header py-3\">\r\n      <div className=\"row flex-nowrap justify-content-between align-items-center\">\r\n        <div className=\"col-4\">\r\n          <img src={props.logo} height=\"40px\" alt=\"Logo\" />\r\n        </div>\r\n        <div className=\"col-4 text-center\">\r\n          <a className=\"blog-header-logo text-dark\" href=\"/\">\r\n            {props.titulo}\r\n          </a>\r\n        </div>\r\n        <div className=\"col-4\"></div>\r\n      </div>\r\n    </header>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Menu(props) {\r\n  return (\r\n    <div className=\"nav-scroller py-1 mb-2\">\r\n      <nav className=\"nav d-flex justify-content-between\">\r\n        {props.categorias.map((categoria, i) => {\r\n          return (\r\n            <Link\r\n              className={\r\n                props.categoriaAtiva === categoria.url\r\n                  ? 'nav-link active p-2 text-muted'\r\n                  : 'nav-link p-2 text-muted'\r\n              }\r\n              to={'/categoria/' + categoria.url}\r\n              key={i}\r\n            >\r\n              {categoria.nome}\r\n            </Link>\r\n          );\r\n        })}\r\n      </nav>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n\r\nexport default class UltimasNoticias extends Component {\r\n  constructor() {\r\n    super();\r\n    this.chaveAcesso = 'e75c4d8babcc1fda571d67ad6fcdfd5a';\r\n    this.state = {\r\n      noticias: [],\r\n    };\r\n    this.style = {\r\n      corNomeOrigemNoticia: '#8DB5E9',\r\n    };\r\n  }\r\n\r\n  definirNoticias() {\r\n    if (!navigator.onLine) {\r\n      this.setState({ noticias: [] });\r\n      let noticiasEmCache = localStorage.getItem(\r\n        'noticias_' + this.props.categoriaAtiva,\r\n      );\r\n      if (typeof noticiasEmCache !== 'undefined' && noticiasEmCache !== null) {\r\n        this.setState({ noticias: JSON.parse(noticiasEmCache) });\r\n      }\r\n    } else {\r\n      axios\r\n        .get(\r\n          'https://gnews.io/api/v4/top-headlines?lang=pt&country=br&topic=' +\r\n            this.props.categoriaAtiva +\r\n            '&token=' +\r\n            this.chaveAcesso,\r\n        )\r\n        .then((response) => {\r\n          this.setState({ noticias: response.data.articles });\r\n          localStorage.setItem(\r\n            'noticias_' + this.props.categoriaAtiva,\r\n            JSON.stringify(response.data.articles),\r\n          );\r\n        })\r\n        .catch((error) => {\r\n          console.log(error);\r\n        });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate(prevProps) {\r\n    if (prevProps.categoriaAtiva !== this.props.categoriaAtiva) {\r\n      this.definirNoticias();\r\n    }\r\n  }\r\n  componentDidMount() {\r\n    this.definirNoticias();\r\n  }\r\n  render() {\r\n    if (this.state.noticias.length) {\r\n      return (\r\n        <div className=\"row mb-2\">\r\n          {this.state.noticias.map((noticia, i) => {\r\n            return (\r\n              <div className=\"col-md-6\" key={'noticia_' + i}>\r\n                <div className=\"card flex-md-row mb-4 shadow-sm h-md-200\">\r\n                  <div className=\"card-body d-flex flex-column align-items-start\">\r\n                    <strong\r\n                      className=\"d-inline-block mb-2\"\r\n                      style={{ color: this.style.corNomeOrigemNoticia }}\r\n                    >\r\n                      {noticia.source.name}\r\n                    </strong>\r\n                    <h4 className=\"mb-0\">\r\n                      <a className=\"text-dark\" href={noticia.url} target=\"_new\">\r\n                        {noticia.title}\r\n                      </a>\r\n                    </h4>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      );\r\n    } else {\r\n      if (!navigator.onLine) {\r\n        return (\r\n          <div class=\"alert alert-warning\" role=\"alert\">\r\n            Não foi possível carregar as notícias dessa categoria :(\r\n          </div>\r\n        );\r\n      } else {\r\n        return <div>Carregando...</div>;\r\n      }\r\n    }\r\n  }\r\n}\r\n","import React from 'react';\r\nimport Topo from './Componentes/Topo/Topo';\r\nimport Menu from './Componentes/Menu/Menu';\r\nimport Noticias from './Componentes/Noticias/Noticias';\r\n\r\nexport default function Principal(props) {\r\n  const categorias = [\r\n    { url: 'breaking-news', nome: 'Geral' },\r\n    { url: 'world', nome: 'Mundo' },\r\n    { url: 'nation', nome: 'Nacional' },\r\n    { url: 'business', nome: 'Negócios' },\r\n    { url: 'technology', nome: 'Tecnologia' },\r\n    { url: 'entertainment', nome: 'Entretenimento' },\r\n    { url: 'sports', nome: 'Esportes' },\r\n    { url: 'science', nome: 'Ciência' },\r\n    { url: 'health', nome: 'Saúde' },\r\n  ];\r\n\r\n  let categoriaAtiva = 'general';\r\n  if (typeof props.match.params.categoria !== 'undefined') {\r\n    categoriaAtiva = props.match.params.categoria;\r\n  }\r\n\r\n  return (\r\n    <div className=\"container\">\r\n      <Topo titulo={'Últimas Notícias'} logo={'/logo.png'} />\r\n      <Menu categorias={categorias} categoriaAtiva={categoriaAtiva} />\r\n      <Noticias categoriaAtiva={categoriaAtiva} />\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\r\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\r\nimport Principal from './Principal.jsx';\r\n\r\nimport './App.css';\r\n\r\nexport default class App extends Component {\r\n  render() {\r\n    return (\r\n      <BrowserRouter basename={process.env.PUBLIC_URL}>\r\n        <Switch>\r\n          <Route path=\"/categoria/:categoria\" component={Principal} />\r\n          <Route exact path=\"/\" component={Principal} />\r\n          <Redirect to=\"/portal-ultimas-noticias/\" />\r\n        </Switch>\r\n      </BrowserRouter>\r\n    );\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}